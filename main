import streamlit as st
import pandas as pd
import plotly.express as px  # Plotly for graphing
import plotly.graph_objects as go
from PIL import Image
import io  # For capturing printed output
from contextlib import redirect_stdout  # Corrected import
# Ensure that kaleido is installed before using it
import plotly.graph_objects as go
import requests  # for Groq API interaction

# Load data
@st.cache_data
def load_data():
    return pd.read_csv("enter the data source path here")  # Replace with your actual data source path

df = load_data()


# Set your Groq API endpoint and API key securely
groq_api_url = "Enter the correct groq url"  # Correct endpoint
groq_api_key = st.secrets["groq"]["api_key"]  # Make sure to securely fetch the API key from environment variables

def query_groq_llama(prompt):
    """
    Send a query to Groq LLaMA and get Python code as a response.
    """
    headers = {
        "Authorization": f"Bearer {groq_api_key}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "llama-3.3-70b-versatile",  # Correct model name
        "messages": [
            {"role": "system", "content": "You are a helpful data assistant that generates Python code to process data."},
            {"role": "user", "content": prompt}
        ]
    }
    
    response = requests.post(groq_api_url, json=payload, headers=headers)
    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content'].strip()
    else:
        st.error(f"Error occurred: {response.status_code} - {response.text}")
        return None

def main():
    # Streamlit app starts here
    st.title("Chat with your Data")
    st.write("Chat with data smartly and get insights explained!")

    # Initialize session state to store conversation
    if "conversation" not in st.session_state:
        st.session_state.conversation = []

    # Show dataset preview
    st.subheader("Dataset Preview")
    st.dataframe(df.head(3))  # Display the first 5 rows

    # User Input
    query = st.text_input("What insights are you seeking? (e.g., Whatâ€™s the total value of orders in 2024?)")

    if st.button("Submit"):
        if query:
            st.write(f"Your query: **{query}**")

            # Store the user's query in the conversation history
            st.session_state.conversation.append({"role": "user", "content": query})

            # Use Groq LLaMA to generate Python code based on the user query
            groq_prompt = f"""
            You are a helpful assistant that generates Python code for data analysis. The dataset contains the following columns:
            {', '.join(df.columns)}

            --Step 1: Null data removal
            Remove records with empty rows.
            
            --Step 2: Data Cleansing Steps
            Enter the data cleansing steps here;

            --Step 3: Define the attribute level information
            Enter the attribute level information here, better to pass it has a parameter so it is automated. 
            
            --Step 4: Show what user has requested
            The user has requested the following:
            {query}

            --Step 5: Generate Python code that can process this request and provide the answer.
            Generate Python code that can process this request and provide the answer.
            The Python code should use the pandas library to process the dataset. If the query involves generating a graph or plot, use Plotly for visualization,
            and ensure to display the plot using st.plotly_chart(fig) for integration with a Streamlit app instead of using fig.show().
            Return only the Python code, no explanations or extra text.
            Please generate Python code that can process this request and provide the answer. Do **not include** any markdown or code block formatting (` ```python` or ` ``` `). Just give the Python code directly.
            my dataset file name is: m1_data.csv
            when generating Python code, ensure the result is displayed first using Streamlit functions (`st.write()`, `st.dataframe()`, etc.). Once the result is displayed, store it in the variable 'output_data' in the last line of the code. Ensure that the result is properly displayed **before** being assigned to the 'output_data' variable.
            If the result is not a graph or fig, ensure that `output_data` stores the result incluing both the description and the calculated result.
            Only if the result is a graph or plot, do not include any descriptive text in `output_data`.
            
            """

            python_code = query_groq_llama(groq_prompt)

            st.write("Generated Python Code:")
            st.code(python_code)

           
# Run the app
if __name__ == "__main__":
    main()
